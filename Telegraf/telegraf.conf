# Global tags can be specified here in key="value" format.
[global_tags]
  # dc = "us-east-1" # will tag all metrics with dc=us-east-1
  # rack = "1a"
  ## Environment variables can be used as tags, and throughout the config file
  # user = "$USER"

# Configuration for telegraf agent
[agent]
  ## Default data collection interval for all inputs
  interval = "5s"
  ## Rounds collection interval to 'interval'
  ## ie, if interval="10s" then always collect on :00, :10, :20, etc.
  round_interval = true

  ## Telegraf will send metrics to outputs in batches of at most
  ## metric_batch_size metrics.
  ## This controls the size of writes that Telegraf sends to output plugins.
  metric_batch_size = 1000

  ## Maximum number of unwritten metrics per output.  Increasing this value
  ## allows for longer periods of output downtime without dropping metrics at the
  ## cost of higher maximum memory usage.
  metric_buffer_limit = 10000

  ## Collection jitter is used to jitter the collection by a random amount.
  ## Each plugin will sleep for a random time within jitter before collecting.
  ## This can be used to avoid many plugins querying things like sysfs at the
  ## same time, which can have a measurable effect on the system.
  collection_jitter = "0s"

  ## Default flushing interval for all outputs. Maximum flush_interval will be
  ## flush_interval + flush_jitter
  flush_interval = "60s"
  ## Jitter the flush interval by a random amount. This is primarily to avoid
  ## large write spikes for users running a large number of telegraf instances.
  ## ie, a jitter of 5s and interval 10s means flushes will happen every 10-15s
  flush_jitter = "0s"

  ## Collected metrics are rounded to the precision specified. Precision is
  ## specified as an interval with an integer + unit (e.g. 0s, 10ms, 2us, 4s).
  ## Valid time units are "ns", "us" (or "Âµs"), "ms", "s".
  ##
  ## By default or when set to "0s", precision will be set to the same
  ## timestamp order as the collection interval, with the maximum being 1s:
  ##   ie, when interval = "10s", precision will be "1s"
  ##       when interval = "250ms", precision will be "1ms"
  ##
  ## Precision will NOT be used for service inputs. It is up to each individual
  ## service input to set the timestamp at the appropriate precision.
  precision = "0s"

  ## Override default hostname, if empty use os.Hostname()
  hostname = ""
  ## If set to true, do no set the "host" tag in the telegraf agent.
  omit_hostname = false

###############################################################################
#                            OUTPUT PLUGINS                                   #
###############################################################################


# # Configuration for sending metrics to InfluxDB 2.0
 [[outputs.influxdb_v2]]
   ## The URLs of the InfluxDB cluster nodes.
   ##
   ## Multiple URLs can be specified for a single cluster, only ONE of the
   ## urls will be written to each interval.
   ##   ex: urls = ["https://us-west-2-1.aws.cloud2.influxdata.com"]
   urls = ["http://localhost:8086"]

   ## Token for authentication.
   token = "6IypDYxGr-RUevYlHxjvH64YB-BKAhEbFEDEBN7TXS7bigYChfZlzIx46HThBjM_6-rJb2IzYgay4Dshlb6ChQ=="

   ## Organization is the name of the organization you wish to write to.
   organization = "Neto"

   ## Destination bucket to write into.
   bucket = "NetoNephedov"

###############################################################################
#                            INPUT PLUGINS                                    #
###############################################################################


# Read metrics about cpu usage
[[inputs.cpu]]
  ## Whether to report per-cpu stats or not
  percpu = true
  ## Whether to report total system cpu stats or not
  totalcpu = true
  ## If true, collect raw CPU time metrics
  collect_cpu_time = false
  ## If true, compute and report the sum of all non-idle CPU states
  report_active = false
  ## If true and the info is available then add core_id and physical_id tags
  core_tags = false


# Read metrics about disk usage by mount point
[[inputs.disk]]
  ## By default stats will be gathered for all mount points.
  ## Set mount_points will restrict the stats to only the specified mount points.
  # mount_points = ["/"]

  ## Ignore mount points by filesystem type.
  ignore_fs = ["tmpfs", "devtmpfs", "devfs", "iso9660", "overlay", "aufs", "squashfs"]

  ## Ignore mount points by mount options.
  ## The 'mount' command reports options of all mounts in parathesis.
  ## Bind mounts can be ignored with the special 'bind' option.
  # ignore_mount_opts = []


# Read metrics about disk IO by device
[[inputs.diskio]]
  ## By default, telegraf will gather stats for all devices including
  ## disk partitions.
  ## Setting devices will restrict the stats to the specified devices.
  ## NOTE: Globbing expressions (e.g. asterix) are not supported for
  ##       disk synonyms like '/dev/disk/by-id'.
  # devices = ["sda", "sdb", "vd*", "/dev/disk/by-id/nvme-eui.00123deadc0de123"]
  ## Uncomment the following line if you need disk serial numbers.
  # skip_serial_number = false
  #
  ## On systems which support it, device metadata can be added in the form of
  ## tags.
  ## Currently only Linux is supported via udev properties. You can view
  ## available properties for a device by running:
  ## 'udevadm info -q property -n /dev/sda'
  ## Note: Most, but not all, udev properties can be accessed this way. Properties
  ## that are currently inaccessible include DEVTYPE, DEVNAME, and DEVPATH.
  # device_tags = ["ID_FS_TYPE", "ID_FS_USAGE"]
  #
  ## Using the same metadata source as device_tags, you can also customize the
  ## name of the device via templates.
  ## The 'name_templates' parameter is a list of templates to try and apply to
  ## the device. The template may contain variables in the form of '$PROPERTY' or
  ## '${PROPERTY}'. The first template which does not contain any variables not
  ## present for the device is used as the device name tag.
  ## The typical use case is for LVM volumes, to get the VG/LV name instead of
  ## the near-meaningless DM-0 name.
  # name_templates = ["$ID_FS_LABEL","$DM_VG_NAME/$DM_LV_NAME"]

# Read metrics about memory usage
[[inputs.mem]]
  # no configuration

# Read metrics about swap memory usage
[[inputs.swap]]
  # no configuration

# Read metrics about system load & uptime
[[inputs.system]]
  # no configuration

# # # Input plugin to counterPath Performance Counters on Windows operating systems
# # # This plugin ONLY supports Windows
 [[inputs.win_perf_counters]]
# #   ## By default this plugin returns basic CPU and Disk statistics.
# #   ## See the README file for more examples.
# #   ## Uncomment examples below or write your own as you see fit. If the system
# #   ## being polled for data does not have the Object at startup of the Telegraf
# #   ## agent, it will not be gathered.
# #   ## Settings:
# #   # PrintValid = false # Print All matching performance counters
# #   # Whether request a timestamp along with the PerfCounter data or just use current time
# #   # UsePerfCounterTime=true
# #   # If UseWildcardsExpansion params is set to true, wildcards (partial wildcards in instance names and wildcards in counters names) in configured counter paths will be expanded
# #   # and in case of localized Windows, counter paths will be also localized. It also returns instance indexes in instance names.
# #   # If false, wildcards (not partial) in instance names will still be expanded, but instance indexes will not be returned in instance names.
# #   #UseWildcardsExpansion = false
# #   # When running on a localized version of Windows and with UseWildcardsExpansion = true, Windows will
# #   # localize object and counter names. When LocalizeWildcardsExpansion = false, use the names in object.Counters instead
# #   # of the localized names. Only Instances can have wildcards in this case. ObjectName and Counters must not have wildcards when this
# #   # setting is false.
# #   #LocalizeWildcardsExpansion = true
# #   # Period after which counters will be reread from configuration and wildcards in counter paths expanded
# #   CountersRefreshInterval="1m"
# #   ## Accepts a list of PDH error codes which are defined in pdh.go, if this error is encountered it will be ignored
# #   ## For example, you can provide "PDH_NO_DATA" to ignore performance counters with no instances
# #   ## By default no errors are ignored
# #   ## You can find the list here: https://github.com/influxdata/telegraf/blob/master/plugins/inputs/win_perf_counters/pdh.go
# #   ## e.g.: IgnoredErrors = ["PDH_NO_DATA"]
# #   # IgnoredErrors = []
# #
   [[inputs.win_perf_counters.object]]
     # Processor usage, alternative to native, reports on a per core.
     ObjectName = "Processor"
     Instances = ["*"]
     Counters = [
       "% Idle Time",
       "% Interrupt Time",
       "% Privileged Time",
       "% User Time",
       "% Processor Time",
       "% DPC Time",
     ]
     Measurement = "win_cpu"
     # Set to true to include _Total instance when querying for all (*).
      IncludeTotal=true
     # Print out when the performance counter is missing from object, counter or instance.
     # WarnOnMissing = false
     # Gather raw values instead of formatted. Raw value is stored in the field name with the "_Raw" suffix, e.g. "Disk_Read_Bytes_sec_Raw".
     # UseRawValues = true

   [[inputs.win_perf_counters.object]]
     # Disk times and queues
     ObjectName = "LogicalDisk"
     Instances = ["*"]
     Counters = [
       "% Idle Time",
       "% Disk Time",
       "% Disk Read Time",
       "% Disk Write Time",
       "% User Time",
       "% Free Space",
       "Current Disk Queue Length",
       "Free Megabytes",
     ]
     Measurement = "win_disk"

   [[inputs.win_perf_counters.object]]
     ObjectName = "PhysicalDisk"
     Instances = ["*"]
     Counters = [
       "Disk Read Bytes/sec",
       "Disk Write Bytes/sec",
       "Current Disk Queue Length",
       "Disk Reads/sec",
       "Disk Writes/sec",
       "% Disk Time",
       "% Disk Read Time",
       "% Disk Write Time",
     ]
     Measurement = "win_diskio"

   [[inputs.win_perf_counters.object]]
     ObjectName = "Network Interface"
     Instances = ["*"]
     Counters = [
       "Bytes Received/sec",
       "Bytes Sent/sec",
       "Packets Received/sec",
       "Packets Sent/sec",
       "Packets Received Discarded",
       "Packets Outbound Discarded",
       "Packets Received Errors",
       "Packets Outbound Errors",
     ]
     Measurement = "win_net"


   [[inputs.win_perf_counters.object]]
     ObjectName = "System"
     Counters = [
       "Context Switches/sec",
       "System Calls/sec",
       "Processor Queue Length",
       "System Up Time",
     ]
     Instances = ["------"]
     Measurement = "win_system"

   [[inputs.win_perf_counters.object]]
     # Example counterPath where the Instance portion must be removed to get data back,
     # such as from the Memory object.
     ObjectName = "Memory"
     Counters = [
       "Available Bytes",
       "Cache Faults/sec",
       "Demand Zero Faults/sec",
       "Page Faults/sec",
       "Pages/sec",
       "Transition Faults/sec",
       "Pool Nonpaged Bytes",
       "Pool Paged Bytes",
       "Standby Cache Reserve Bytes",
       "Standby Cache Normal Priority Bytes",
       "Standby Cache Core Bytes",
     ]
     Instances = ["------"] # Use 6 x - to remove the Instance bit from the counterPath.
     Measurement = "win_mem"

   [[inputs.win_perf_counters.object]]
     # Example query where the Instance portion must be removed to get data back,
     # such as from the Paging File object.
     ObjectName = "Paging File"
     Counters = [
       "% Usage",
     ]
     Instances = ["_Total"]
     Measurement = "win_swap"
